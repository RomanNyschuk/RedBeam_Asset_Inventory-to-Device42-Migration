"""
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

###############################################################################################
# This takes the xlsx file generated by RedMine export and imports data into Device42 via APIs
# v1.0.0
# works well with Device42 v5.7.2 and above (building was added to Device API call in v5.7.2
# requires python v2.7.x
# requires xlrd v0.9.x and above to be installed. https://pypi.python.org/pypi/xlrd or https://github.com/python-excel/xlrd/archive/master.zip
# to install xlrd, unzip the contents and from the folder run: %PYTHONPATH%\python.exe setup.py install
###############################################################################################

import urllib2
import urllib
from base64 import b64encode
import json
import datetime

import xlrd


D42_API_URL = 'http://D42IP'                        # make sure to NOT to end in /
D42_USERNAME = 'D42USER'
D42_PASSWORD = 'D42PASS'

FILENAME = 'example.xlsx'                           #Change the filename to the name of the excel file
ADD_ASSIGNMENT_AS_LIFECYCLE_EVENT = True
LIFECYCLE_ACTION_FOR_ASSIGNMENT = 'Assigned To'     #This asset action must exist in D42 beforehand
COLUMN_NO_FOR_LIFECYCLE_DATE = 49                   #This points to UF_Builddate, You can change it.
ADD_STATUS_AS_CUSTOM_KEY = True
DEBUG = False

def post(params, what, API_METHOD='post'):
    if what == 'device': THE_URL = D42_API_URL + '/api/device/'
    elif what == 'ip': THE_URL = D42_API_URL + '/api/ip/'
    else: THE_URL = D42_API_URL + '/api/1.0/' + what + '/'
    data= urllib.urlencode(params)
    headers = {
            'Authorization' : 'Basic '+ b64encode(D42_USERNAME + ':' + D42_PASSWORD),
            'Content-Type' : 'application/x-www-form-urlencoded'
        }
    req = urllib2.Request(THE_URL, data, headers)
    if API_METHOD == 'put': req.get_method = lambda: 'PUT'
    if DEBUG: print '---REQUEST---',req.get_full_url()
    if DEBUG: print req.headers
    if DEBUG: print req.data
    try:
        r = urllib2.urlopen(req)
        if r.getcode() == 200:
            obj = r.read()
            msg = json.loads(obj)
            return True, msg
        else:
            return False, r.getcode()
    except urllib2.HTTPError, e:
        error_response = e.read()
        if DEBUG: print e.code, error_response
        return False, error_response
    except Exception,e:
        return False, str(e)



wb=xlrd.open_workbook(FILENAME)
sh=wb.sheet_by_index(0)
for rownum in range(sh.nrows):
    if rownum == 0: pass        #header row
    else:
        if sh.row_values(rownum)[4]:
            blgdargs = {'name': sh.row_values(rownum)[4]}
            print post(blgdargs, 'buildings')
            if sh.row_values(rownum)[6]:
                roomargs = {'name': sh.row_values(rownum)[6], 'building': sh.row_values(rownum)[5]}
                print post(roomargs, 'rooms')

        if sh.row_values(rownum)[8]:
            customerargs = {'name': sh.row_values(rownum)[8]}
            print post(customerargs, 'customers')

        if sh.row_values(rownum)[9]:
            enduserargs = {'name': sh.row_values(rownum)[9]}
            print post(enduserargs, 'endusers')

        if sh.row_values(rownum)[12]:
            vendorargs = {'name': sh.row_values(rownum)[12]}
            print post(vendorargs, 'vendors')

        if sh.cell_type(rownum, 0) == xlrd.XL_CELL_NUMBER:
            devname = str(int(sh.row_values(rownum)[0])) #strip .0 if added by excel
        else:
            devname = sh.row_values(rownum)[0]
        devargs = {'name': devname, 'serial_no': sh.row_values(rownum)[2], 'location': sh.row_values(rownum)[5], 'building': sh.row_values(rownum)[4],
                   'type': 'other', 'subtype': 'laptop', 'notes': sh.row_values(rownum)[16], 'hardware': sh.row_values(rownum)[3], 'manufacturer': sh.row_values(rownum)[7],
                   'customer': sh.row_values(rownum)[8]}
        print post(devargs, 'device')

        #add custodian as a lifecycle event - assigned to - or change it to match above.
        if ADD_ASSIGNMENT_AS_LIFECYCLE_EVENT:
            if sh.row_values(rownum)[COLUMN_NO_FOR_LIFECYCLE_DATE]:
                the_date = xlrd.xldate_as_tuple(sh.row_values(rownum)[COLUMN_NO_FOR_LIFECYCLE_DATE], 0)
                date_to_use = str(the_date[0])+'-'+str(the_date[1])+'-'+str(the_date[2])
            else:
                today = datetime.datetime.today()
                date_to_use = today.strftime('%Y-%M-%d')
            lifecycleargs = {'date': date_to_use, 'type': LIFECYCLE_ACTION_FOR_ASSIGNMENT, 'user': sh.row_values(rownum)[9], 'device': devname}
            print post(lifecycleargs, 'lifecycle_event', 'put')

        if ADD_STATUS_AS_CUSTOM_KEY and sh.row_values(rownum)[10]:
            statusargs = {'name': devname,'key': 'status', 'value2': sh.row_values(rownum)[10] }
            print post(statusargs, 'device/custom_field', 'put')
